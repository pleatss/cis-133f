Quadratic-Time (O(n^2)) Sorting:
    - We have a sequence of n elements 
        n(n-1)/2    Comparisons = O(n^2)

Selection Sort:
Is not adaptive, it doesnt get faster when you give it a sequence that is already sorted, it swaps things that are already provided with it 
Not stable

ex: You give it swap(1,2,3,4)
    swap(2,3,4,1)

Bubble Sort:
If you find a pair of values that are out of order, then you can swap them and make things out of order which will lead us to:

    Compare-and-swap
    Where we say:
        if(v[i] > v[i+1])
            swap(v[i], v[i+1])
            
The way our bubble sort works is that it will compare swap our items from left to right in our array,
it will grab the largest thing and drag it to our last number
and while we do end up with the largest at the end, it also moves other things around

Smaller values take more time to work its way back down to the beginning, while larger numbers are much faster

It doesnt matter what order you do the compare and swaps, where it can be a random order/sequence, as long as its occurring it will loop


Insertion Sort:

If you keep sorting it over and over, the unsorted territory will shrink to nothing at all, but it will end to where the whole thing is sorted eventually

ex:
| O |       Unsorted    |

|
v
|   Sorted |    Insert |        Unsorted    |

This type of sort is also adaptive, it doesnt move things at all if the sequence is already sorted 

The closer it is to being entirely sorted the faster it will be into running in O(n)

Gnome Sort:

A variation of insertion sort 

There is a gnome who sorts your sequence 

The gnome goes by these rules:

    1. The gnome starts at the beginning of the process, starting at position 1
    2. If the gnome is at position 0, the gnome moves RIGHT  
    3. If the gnome is at position n, STOP: we're done
    4. Otherwise, the gnome is between position 1 ... n-1:
                Compares the current values to the value to the left 
            - If they are in order, move right
            - If they are out-of-order, swap, move left 

The gnome walks to the right until it sees things out of order, but the second it sees something out of order,
it will move left to swap it until it IS in order 

The code of the gnome will look similar to this:

void gnome_sort(vector<int>& v)
{
     int g = 1 ; #// Rule 1 
     while(g < v.size()){   #// Rule 3 
          if(g==0)      #// Rule 2
          ++g;
          else{
               if(v[g] >= v[g-1]) #// Rule 4a
          }
          else{
               swap(v[g], v[g-1]); #// Rule 4b
               --g;
          }
     }
}

This will be apart of the test as a question (gnome sorting) know it ^


Subquadratic (O(nlogn)) Sorting:

If we assume there is no duplicates then every value will go less than or greater two, these are two ways this comparison might go 

It might go either true, or it might go false

Decision Tree:

                        [O]      <      [1]
                        True            False
[1]      <      [2] 
True            
<0,1,2>         



What we are looking for is something that will connect n to h, the height of the tree

In other words, how many answers are there 

Width of tree = O(n!)
                  

Shellsort - The 1st sub-O(n^2) Sort 

Gap Sequences:  1,3,7,15 .. 2^i - 1

Mergesort:

-   Runtime: O(nlogn)
-   Optimal: (better than adaptive)
        Does the minimum comparisons 

-Not in-place:: O(n) memory 


The Merge Operation:
in: 0   1   2   3   4   5   6   7   8
    2   7   10  15  -1  0   6   8   

out: -1 0   2   6   7   8   10  15

Merge Operation in code:

void merge(int* in, int size, int* out)
{
       int i = 0, j = size/2, k = 0 ;

       // Stage 1: Merge
       while(i < size/2 and j<size){
              if(in[i] < in[j]){
                     out[k]=in[i];
                     ++i;
                     ++k;
              }
       }
       else{
              out[k]=in[j];
              ++j;
              ++k;
       }
       // Stage 2: Copy remaining -> out 
        // i ==size/2 or j==size

        while(i < size/2)
            out[k++] = in[i++];     // only ONE of these loops run!! 
        while(j < size)
            out[k++] = in[j++];

}

Merge functions:
void mergesort(int* in, int size, int* out)
{
       if(size == 0) return;
       else if(size==1) out[0] //Look at the photo from your phone of the code 
}

void merge(int* in, int size, int* out)
{
        int i = 0, j = size/2, k = 0;

        //Stage 1: Merge
        while( i < size/2 and j<size){
            if(in[i] < in[j]){
                out[k]=in[i];
                ++i;
                ++k;
            }
        }
        
        else{
            out[k]=in[j];
            ++j;
            ++k;
        }
        
        //i==size/2, or j==dize
        //Stage 2: Copy remaining elements
        while(i < size/2)
            out[k++]=in[i++];
        while(j < size)
            out[k++]=in[j++];
        //i == size/2, j==size, k==size
}

void mergesort(int* in, int size, int* out)
{
    if(size==0) return;
    else if(size==1) out[0]=in[0];
    else{ //Size > 2
        int mid = size/2;
        mergesort(in, mid, out);
        mergesort(in+mid, size-mid, out+mid);
                            // mid
            //out:  | ---------> |  -------> |

        for(int i = 0; i <size; ++i)
            in[i] = out[i];
                            // mid
            //in:  | ---------> |  -------> |
        merge(int,size,out);
            //out: | ---------------------> |

    }
}

Mergesort on Linked Lists (ASSIGNMENT 3):

node* mergesort(node* in, int size);

node* merge(node* left, node* right);


Quicksort:

Partition:
Move "small" elements to the left side and "large" elements to the right.

Pick one element to be the pivot:
    "small" ---> < pivot
    "large" ---> > pivot

int partition(int* arr, int size)
{
    int i=-1, j=size;
    while(true){
        do ++i; while(arr[i]<p ); //Stop when arr[i]>p
        do --j; while(arr[j]>p); //Stop when arr[j]<p

        if(i>==j) return j+1; //Start of right half

        swap(arr[i],arr[j])
    }
}

void quicksort(int*arr, int size)
{
    if(size==0 or size==1)
        return;

    else{ // size >(greater or equal) 2
        int mid=partition(arr,size);

        if(mid==0) mid=1;
        else if(mid==size) mid=size-1;

        quicksort(arr, mid); //Left
        quicksort(arr+mid, size-mid); //Right
    }
}

Special-Case Sorting:
Sort a sequence v consisting of a permutation of the first n multiples of 3 (0, 3, 6, ... )

E.g. n = 5
    2*3     0*3     3*3     4*3     1*3
    {6,     0,      9,      12,      3}

a code snippet will look like:

for(int i = 0; i < n ; ++i)     //
    v[i] = 3 * i ;              // Which is O(n)
--

Counting-Sort:
     We have a sequence v consisting values between 0 ... k-1.

E.g. if k=3

    v={2,   0,  0,   1,   0,   2,   2,   0,   1}

    Sort this sequence.
    
        Stage 1: Count:
        0s: 4

        1s: 2       //These run in O(n) time, and O(k) memory

        2s: 3       

        Stage 2: Regenerate

        v={0,   0,  0,  0,  1,  1,  2,  2,  2,  2}  //O(k*n)


        The code for Countiing-Sort will look like such:

        void count_sort(vector<int>& v, int k)
        {
            //  Stage 1: Count
            vector<int>     cs(k, 0) ;
            for(int x:v)
            ++cs[x];

            //Stage 2: Regenerate
            v.clear();                          //Here we are clearing the vector to start from scratch
            for(int x = 0 ; x < k ; ++x){
                int c = cs[x];                  //This will tell us how many Xs are going to be in our OUTPUT
                for(int i = 0 ; i < c ; ++i)
                v.push_back(x);
            } //In Big(O) terms, this outer loop runs (k times), but actually runs O(K*n)
        }

Bucket-Sort
    We have an input sequence v whose values are uniformly distrubuted


Hybrid Sorting:

