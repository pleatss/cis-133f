Mod #1: C++ Review

// Question 1:
class ordered_array{
    public:
    //
    //
    //
    void erase(int i);
    //
    //
    //
    //
    private:
    int*data;
    int sz, cap
};

void ordered_array::erase(int i)
{
    if(i < 0 or i >= sz)
    return;
    
    for(int j=i ; j < sz-1 ; ++j)
        data[j] = data[j+i];
        --sz;
}

// Question 2:
bool check_pairs(vector<int> v)
{
    for(int i=0 ; i < v.size()-1 ; ++i)
        if(v[i]==v[i+1])
        return true;

    return false;
}

// Question 3: Find the three errors in this code // 
void ordered_array::insert(int e)
{
    if(sz==cap) //
        return; // These two lines are saying "Do nothing if full"

    data[sz] = e;
        ++sz;

    int i = sz;
    while(i >= 0 and data[i] < data [i-1]){
        swap(data[i], data[i-1]);
    }
}

void ordered_array::insert(int e)
{
    if(sz==cap) //
        return; // These two lines are saying "Do nothing if full"

    data[sz] = e;
        ++sz;

    int i = sz-1 ; // insert here was incorrect, -1 was inserted here in place of 0 
    while(i >= 1 and data[i] < data [i-1]){
        swap(data[i], data[i-1]);
        --i; //Keeps the loop going to 
    }
} 

Question 4:
void strided_print(vector<int> v)
{
    for(int i=0 ; i < v.size() ; i+=2)
        cout << v[i] << endl;

    for(int i=1 ; i < v.size(); i +=2)
        cout << v[i] << endl;

    // OR you can make it into a loop function

    for(int i=0 ; i < v.size() ; )
        cout << v[i] << endl;

        i+=2;
        if(i %2==0 and i >=v.size())
        i=1;
}

Question 5:

void f(vector<int>& m)
{
    int i=0, j=m.size()-1;
    while(i<j)
        swap(m[++i], m[j--l]);      // If we do the ++ first, it goes before everything else, the -- is after everything else
                                    // ++i ; , swap(m[i], m[j]) ; , --j
};


Module 2:
Question 1:

void remove_0(vector<int>& data)
{
    for(int i=0 ; i < data.size() ; ++i)
        if(data[i] == 0){
            data.erase(data.begin()+i);
            --i;
        }
}

                        Best        Worst
                        --------------------
data[...]           |  n                n 
                    |
data.errors(...)    | 0 (No zeroes)     n (All zeroes)
                    |
data[i]==0          |   n               n 


