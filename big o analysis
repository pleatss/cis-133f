f(n) = O(g(n)) -- Our function

If k > 0, n0 > 0, such that f(n) < k*g(n) for all n > n0

k - We dont care about constant functions
n0 - We dont care about "small" (n < n0)

< - g(n) is an upper-bound


                Rules for big O:
            1. Inside a big-O, you can erplace all constant multiples with 1. 
                    O(257n^2) -> O(n^2)
                    
                    O(1/1000n) -> O(n)

                    O(521) -> O(1)

                    O((pi^2 - 2^e)log n) *<- Constant* -> O(log n)

            2. IN a sum inside the big-O, you can drop all but the fastest growing term. 
                O(1000n +7n^2 + 1/50n^3)

                O(n + n^2 +n^3) -> O(n^3)

for(int i = 0; i < n ; i + = 2){ // n * O(n) = O(n^2)
for(int j = 0; j < n ; ++j){ // n * O(1) = O(n)
    O(1) 
    .
    .
    etc
    } 
}

for(int i = 1 ; i < n ; i + = 2){
        .
        .
        .
        O(1)    
}




for(int i = 0 ; i < n ; ++i) // < - Outer Loop
for(int j = 0 ; j < i ++j){ // < - Inner Loop 
    .
    .
    .

}

Total : 0 * O(1) + 1 * O(1) + 2 * O(1) + . . . + (n-2)O(1) + (n - 1) O(1)



The Maximal Contigous Subsequence Sum Problem (MCSS)

{-2, 1, 3, -5, 4, 7, -2, 3, -4}

    - Contigous Subsequence: 
        A subsequence, possibly empty, which doent ' skip ' any elements.

    - Subsequence Sum: 
        Sum of values in the subsequence. (Empty subsequence sums to 0.)

    - Maximal Sum: 
        What is the largest that can be formed from any contigous subsequence? 



Attempt #1: Consider all possible subsequences

int mcss(const vector <int> 8 v)
{
    int i = 0 ; //Largest sum so far 
}

See MCSS.cpp!!!!!


------


Amortized Analysis
            - What if the average of the big-O runtimes is different from the worst of all the runs? 
                    O(n^2 + 1 + 1 + 1 + 1 . . . . etc ) = O(n^2)
                    enough to balance n^2 ^^^^          | might be better to use ^^^ 


Pile 
op(k,x): Remove k items from the pile, then add x. 