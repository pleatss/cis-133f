Recursion: A problem solving technique involving breaking a problem into smaller subrproblem(s),
where the subrproblem has the same "form" pr "shape" as the original. 

Write a function:

int sum(int n);

Which will return: 

0+1+2+ . . . + (n-1) + n 
(Assuming that n > 0 )


With a loop: 

int sum(int n)
{
    int s = 0; //Running Sum
    for(int i = 0 ; i <= n ; ++i)
        s+=i;
        return s;
}

OR 

int s=0;
while(n >= 0){
    s+=n;
    --n
}
return s;


The problem:
"Add up the number from 0 to something."

sum(n) = o+1+2+ . . . + (n-1) + n 

int sum(int n)
{
    if(n==0)
        return 0;
    else // n > 0
        return sum(n-1)+n;
}

-------------------------------------

Recursion Tree:
sum(5) //= 15          //n0=5
|
v
sum(4) + 5 // 10 + 5 = 15     //n1=4
|
v 
sum(3) + 4 // 6 + 4 = 10      //n2=3
|
v
sum(2) + 3 // 3 + 3 = 6      //n3=2
|
v
sum(1) + 2  //1 + 2 = 3      //n4=1
|
v 
sum(0) + 1  // 0 + 1 = 1     //n5=0

We need at least one base case in there to tell the program to stop breaking it down

While the recursive case will break it down with a recusive function call, 
some will have different ways of breaking it down which is a case by case basis

To design a Recursive Algorithm:

    1. How can I make the problem smaller ( "shrink")? 

    2. How do I take a solution to a "smaller" problem, defined in terms of the first problem (1.), and then
    grow it into a solution to the original problem?

    3. What is the smallest form of the problem? 

    sum(5) ------------------->     15
    |                               ^
    |                               |        
    | // Shrink: n-1                |   Grow: . . . + n
    |                               |   
    |                               |
    v                               |
    sum(4) ~~~~~~~~~~~~~~~~~~~~~~>  10
//  |     (Recursive leap of faith) ^
    |                               |
    |                               |
    |                               |
    |                               |
    v                               |
    sum(0) -----------------------> 0

Write a function: 

    float powi(float b, int n);

Which computes b^n (assuming that n > 0)

    b^n = b * b * ... * b 
            b^n-1
Which we can rephrase to:
b^n - b^n-1 * b^1

---

float powi(float b, int n)
{
    if(n==0)
        return 1; // This is the BASE case 
    else // n > 0 
        return powi(b, n-1) /* Rec Fun Call */ * b; // This is the RECURSION case
}

b^n = b * b ... * b * b * b * ... * b 
// n even

b^n = (b^n/2)^2
//n even
                        //  RECURSION CASE(S) v ^
b^n = b^n-1 * b 
//n odd

b^0 = 1 

-----------------------------------------------------------------------------------------------------------------

float powi(float b, int n)
{
    if(n==0)
        return 1;
    else if(n%2==0){
        float p2 = powi(b, n/2);
        return p2*p2;
    }
    else // n odd
        return powi(b, n-1) * b;
}

^^ Linearly Recursive

---------------------------------------------------------

Factorial:

n! = 1 * 2 * . . . * (n=1) * n 

n! = (n-1)! * n 

0! = 1 

int fact(int n)
{
    if(n==0)
        return 1; 
    else // n > 0 
        return fact(n-1) * n ; 
}

Linearly Recursive 

---------------------------------------------------------

Fibonacci Sequence:
0   1   2   3   4   5   6
____________________________
1   1   2   3   5   8   13  ...

The definition is given recursively, where the 0th element of it is as follows
F[0] = 1 
F[1] = 1 
F[n] = F[n-1] + F[n-2]
 ^ n > 1 

In code terms, can be with two base cases/recursive case and with an if/or statement:

int fib(int n)
{
    if(n==0 or n==1)        //BASE case
        return 1;           //BASE case 
    else 
        return fib(n-1) + fib(n-2); // RECURSIVE case
}
            //Non - Linerarly Recursive

breaks down into:

fact(4) = 24
|
v
fact(3) * 4 = 6 * 4 = 24
| 
v 
fact(2) * 3 = 2 * 3 = 6
|
v 
fact(1) * 2 = 1 * 2 = 2 
|
v
fact(0) * 1 = 1 * 1 = 1 
|
v 
1

Simplifies into O(n+1) which is just O(n)
--------------------------------------------

int fact(int n, int f=1)
{
    if(n==0)
        return f;
    else
        return fact(n-1, f * n);
}

Tail Recursive ^^ : Memory maybe O(1)

Write a function
    int sum(vector<int> v)
which adds all the elements of v, returning the sum.

Shrink: (For vectors)

    -   .pop_back(): Removes the last element O(1)
    
    -   .erase(): Removes ANY element O(n)
--

