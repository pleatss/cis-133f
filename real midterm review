Midterm 1 Review:

    Module 1: C++ Review

    Module 2: Analysis; Sequence, data struct
    (vectors, lists, stacks, queues)

5 questions per module

3/5 is a pass for that module

Any ones you dont pass you can reattempt on later modules


-------------------------------------------------------------

Module 1: C++ Review    

    Q:  From the assignment 1 ordered_array class:

class ordered_array{
    public:
    //
    //
    //
    //
    int count(int x);
    //
    //
    //
    //
    private:
    int* data;
    int* sz;
};

    Write the implementation of the count method, which returns the number of times that x occurs in the array. 

int ordered_array::count(int x)
{
    // Your code goes here 

    int c = 0 ;                        |                                \
    for(int i = 0 ; i < sz ; ++i)      |    c += (data[i] == x); 
        if(data [i] == x)              | 
        ++c;


    return c;
}                                   // All of this would be O(n), which is the worst cases, best case is O(1)

-------

Q: What does this function do?

void f(vector<int>  v)
{
    for(int i = 0 ; i < v.size()-1 ; ++i)
        if(v[i] < v[i+1])
            v[i] = 0 ;
        else
            break;
}

Give an example of a vector of size > 4, showing whwat the vector wuold be before/after f() processes it. 

v = {5, 4, 7, 3}                        {1, 5, 9, 7}
        |                                       |
        | f()                                   |
        v                                       v
    {5, 4, 7, 3}                        {0, 0, 9, 7}


----

MODULE 2: Analysis; Sequences, Data Structures

Q: Perform step wise analysis on the following function:

void normalize(vector<float>l v)
{
    float s = v[0], l = v[0]; //These are outside of the loop, not depending on n 

    for(int i = 0 ; i < v.size(); ++i){
        if(v[i] < s)    s = v[i]; /* (n-1)/2 */             //The vallues of v[i] (on the left runs n times)
        if(v[i] > l)    l = v[i]; /* (n-1)/2 */             // The values of v[i] on the right side will have a best/worst case 
    }
    for(int i = 0; i < v.size(); ++i)
    v[i] = (v[i] - s) / (l - s)
}


Counting the operations:
v[i]
                                            Best                        Worst
s = . . .                       v[...]  |   2 + 2n + 0 +                2 + 2n + n - 1 
l = . . .                       s = ... |   1 + 0 = 1                   1 + n - 1 = n
                                l = ... |   1 + 0 = 1                   1 + n = n
                                        |   O(n)                        O(n)

-------------------------------------------------------------------------------------------------------------------------------------------------

Q: Perform 10 push_backs using this push_back function (with a sorting sz = 0, cap = 1).

function (with a starting sz = 0, cap = 1)

    void push_back(int x)
    {
        if(sz == cap){
            int newcap = (5 * cap - 1 / 3);
            //
            //
            //
            //
            //
        }
    }


    PB# |   sz      cap         cost
    ---------------------------------------------------------------------------------------
            0       1           
    1   |   1       1           1
    2   |   2       2           2
    3   |   3       4           3          
    4   |   4       4           1
    5   |   5       7        
    6   |   6       7
    7   |   7       7
    8   |   8       7
    9   |   9       12
    10  |   10      12
    11  |   11      12
    12  |   12      12
                    (20)

------------------------------------------------

Q: Given the doubly-linked list class from assignment 2, write the polindrome() method, which returns true if the list is a polindrome (same backwards/forwards)

class dlist{
    public:
        struct node {
            int value;
            node* next;
            node* prev;
        };
        bool polindrome();
    private:
    node* hd = nullptr;
    node* tl = nullptr;
};

Your code must RUN in O(n), and must NOT modify the list.

void dlist::polindrome()
{
    node* i = hd;
    node* j= tl;
    while(i != j){
        if(i !)
    }
}