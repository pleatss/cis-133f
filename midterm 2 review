Module 3: Recursion + Sorting

Q. Here is a recursive function
    
    bool f(int a, int b)
    {
        if(a == 0)
            return true; // Base Case 1
        else if(a < b)
            return false; // Base Case 2
        else
            return f(a-b, a) // Recursive Case
    }

    Draw the recursion trees f(10, 3), f(15, 6), f(15, 5)

Q. In the Selection sort, we find the smalled remaining element
    and swap it to the beginning

    sorted      smalled 
    [][][][][] | [][][][][][]
    sorted

    instead of finding the smallest value, what
    if we find the larges? Where would we swap it
    so that the results are still sorted ascending?

    void sel_sort(vector<int>& v)
    {
        for(int i - v.size() - 1; i > 0; --i){
            //Find largest in v[0]...v[i]
            int largest = i;

            for(int j = 0; j < i; ++j){
                if(v[j] > v[largest])
                    largest = j;

            swap(v[i], v[largest])
            }
    }

Q: Is this function a sorting algorithm? Find an input that this function fails to sort 

    void f(vector<int& v)
    {
        for(int i=0; i < v.size(); ++i)
            for(int j=(i%2); j<v.size(); j+=2)
                if(v[j], v[j+2]);

    }

    v = {4,3,2,1}

    Result: {2,1,4,3}
    

    Q: In a bitonic merge sort, the input to the merge() function is ascending followed by descending:

        0   3   9   6   4   2   -1  -3  -7

        Note that the two sequences need not be balanced!

        out:    -7  -3  -1  0   3   4   6   9   

    void merge(int* in, int size, int* out)
    {
        int i = 0, j = size-1, k=0 ;
        while( i<= j){
            if(in[i] < in[j]){
                out[k]=in[i];
                ++i;
            }
            else{
                out[k]=in[j];
                --j;
            }
            ++k;
        }
    }

    Q: Suppose that we mergesort a sequence of length 10. How many calls to the merge function() will this cause?

                                    10
                                5       5
                        2       3       2       3
                    1   1   1   2       1   1   1   2
                            1   1               1   1


-


Module 4: BSTs

struct node
{
    int key;
    node* left;
    node* right;
    //node* parent;
    //int height;
};

Q: For a BST, we want to find the sum of all of the keys:

    int sum(node* root)
    {
        if(root==nullptr)
            return 0;
        else
            return root->key +
                sum(root->left)+
                sum(root->right);
    }
-

Q: We want to compare two BSTs, to determine if every key in a less-than every key in b:
    
    bool less_than(node* a, node* b)
    {
        node* largest = a;
        while(largest->right !=nullptr)
            largest=largest->right;
        
        node* smallest = b;
        while(smallest->left !=nullptr)
            smallest=smallest-> left;

        return largest->key < smallest->key ;
    }
-

Q: Insert these values into an AVL Tree: (Remember the rule is less than you move left greater than you move right until you 'fall off the tree')

2,  7,  -3, 15, 10, 0


                    2
            -3             7     <- This is where the imbalance begins, fix whatever imbalance is closest to base, this is an inside imbalance 

                                15

                            10      
                    (Rotate 10 twice)

TO fix our imbalance we have to find the outstanding variables that are heavy and messing with our tree 

                    2
   Imbalance-> -3              10
                    0       7       15

                        1
-


Q: Insert these values into an AVL tree:

    2   7   -3  15  10  0   1


    2
        7

                    Zig
                    |
                    v 
                    7
                2
            -3



            
